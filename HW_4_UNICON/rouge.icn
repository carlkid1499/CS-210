procedure main()
	grid:= list(24, repl(" ", 78))
    
    i := 0
    while i < 20 do 
    {
        # generate the xy coordinates
        # and the size of the room
        xy := xy_loc()
        size := rm_size()
        nearby := nearby_rm(xy,size,grid)
        bound := rm_in_bound(xy,size)

        
        # Is room to small?
        if (size[1] < 3) then
            next
        else if(size[2] < 3) then
            next
        # Is the room in bounds
        else {
            if(bound = 1) then {
            #Yes room is in bounds

            # Are there any rooms next door?
            if(nearby = 0) then {
                write("No nearby room: ",\nearby)
                write("Place the room on the grid")
                place_rm(xy,size,grid)
            }
            else{
                write("Found a room nearby!: ", \nearby)
                }
            }
            else {
                #Room not in bound
                next
            }    
        }
        i+:=1
    }
    show(grid)
end


procedure xy_loc()
    # Generate xy coordinates
    # for the grid.
    # 0123...78
    # 1123...78
    # 2123...78
    # etc.

    x := ?78
    y := ?24

    # debug code
    write("x: ",\x)
    write("y: ",\y)

    xy := list(x,y)
    return xy
end

procedure rm_size()
    # Generate the room size
    # and deterine if it'll
    # fit on the grid.

    width := ?20
    height := ?5
    rm_dimen := list(width,height)

    # debug code
    write("width: ",\width)
    write("height: ",\height)
    
    rm_dimen := list(width,height)
    return rm_dimen
end

procedure rm_in_bound(xy,size)
    # Determine if round is within bounds
    # bound being 1 is yes
    # bound being 0 is no

    bound := 1
    width := 78
    height := 24
    if(xy[1]+size[1] > width) then {
        bound := 0
        return bound
    }
    else if(xy[2]+size[2] > height) then {
        bound := 0
        return bound
    }
    else {
        return bound
    }
end

procedure nearby_rm(xy,size,grid)
    # Check to see if there are 
    # any rooms nearby.

    nearby := 0
    # Search on the inside
    every i := xy[1]+1 to (xy[1]+size[1]-1) by 1 do {
        every j := xy[2]+1 to (xy[2]+size[2]-1) by 1 do {
                if(grid[j][i] == "-") then
                    nearby := 1
                else if (grid[j][i] == "|") then
                    nearby := 1  
                else if(grid[j][i] == ".") then
                    nearby := 1 
                else
                    next
        }
    }

    # Search on the outside, left
    every i :=  (xy[1]-3) to xy[1]-1 by 1 do {
        every j := xy[2] to xy[2]+size[2] by 1 do {
                if(grid[j][i] == "-") then
                {
                    #grid[j][i] := "*"
                    nearby := 1
                }
                else if (grid[j][i] == "|") then {
                    #grid[j][i] := "*"
                    nearby := 1  
                } 
                else if(grid[j][i] == ".") then
                    nearby := 1
                else
                    next
        }
    }

    # Search on the outside, right
    every i :=  (xy[1]+size[1]+1) to (xy[1]+size[1]+3) by 1 do {
        every j := xy[2] to xy[2]+size[2] by 1 do {
                if(grid[j][i] == "-") then
                {
                    #grid[j][i] := "*"
                    nearby := 1
                }
                else if (grid[j][i] == "|") then {
                    #grid[j][i] := "*"
                    nearby := 1  
                } 
                else if(grid[j][i] == ".") then
                    nearby := 1
                else
                    next
        }
    }


    return nearby
end

procedure place_rm(xy,size,grid)   
    # Place the room on the grid

    i := xy[1]
    while i <= xy[1]+size[1] do {
        # Place North Wall
        grid[xy[2]][i] := "-"
        # Place South Wall
        grid[xy[2]+size[2]][i] := "-"
        i+:=1
    }
    
    j := xy[2]
    while j <= xy[2]+size[2]-2 do {
        # Place East Wall
        grid[j+1][xy[1]] := "|"
        # Place West Wall
        grid[j+1][xy[1]+size[1]] := "|"
        j+:=1
    }

    # Note to self.  There is a difference between while and 
    # every. See http://unicon.org/book/ub.pdf for more info.

    # place the dots
    every m := xy[1]+1 to (xy[1]+size[1]-1) by 1 do {
        every n := xy[2]+1 to (xy[2]+size[2]-1) by 1 do {
            grid[n][m] := "."   
        }
    }	
end

procedure show(L)
	every write(!L)
end